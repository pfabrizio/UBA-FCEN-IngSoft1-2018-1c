Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport'!!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'session importer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport'!!CustomerImportTest methodsFor: 'test data' stamp: 'Gabriel 6/24/2018 18:36'!invalidCustomerDocumentTypeTestData	^ ReadStream on:'C,Pepe,Sanchez,DD,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Gabriel 6/24/2018 18:01'!alphanumericCustomerLastNameTestData	^ ReadStream on:'C,Pepe,San24ch82ez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Pablo 6/21/2018 21:23'!incompleteCustomerRegisterTestData	^ ReadStream on:'C,Pepe,Sanchez,DA,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Pablo 6/21/2018 21:14'!firstAddressRegisterTypeTestData	^ ReadStream on:'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Pablo 6/21/2018 20:59'!noCustomerOrAddressRegisterTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9H,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Gabriel 6/24/2018 17:39'!alphanumericCustomerNameTestData	^ ReadStream on:'C,Pep9e,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/1/2016 15:17'!validTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Gabriel 6/24/2018 18:58'!incompleteAddressRegisterTestData	^ ReadStream on:'C,Pepe,Sanchez,D,2333333A,San Martin,3322,Olivos,1636A,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Gabriel 6/24/2018 16:56'!invalidRegisterTypeTestData	^ ReadStream on:'C123,Pepe,Sanchez,D,22333444ADada,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Pablo 6/21/2018 20:37'!emptyTestData	^ ReadStream on:''! !!CustomerImportTest methodsFor: 'test data' stamp: 'Gabriel 6/24/2018 19:18'!invalidCustomerDocumentDataOfDniTypeTestData	^ ReadStream on:'C,Pepe,Sanchez,D,2233a3444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Gabriel 6/24/2018 19:16'!invalidCustomerDocumentDataOfCuilTypeTestData	^ ReadStream on:'C,Pepe,Sanchez,C,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!setUp	session := DataBaseSession for: (Array with: self addressMapping with: self customerMapping).	session open.	session beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!tearDown	session commit.	session close! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'Pablo 6/21/2018 20:42'!assertImportedEmptyCustomersSizeIsCorrect		self assert: (session selectAllOfType: Customer) size equals: 0.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:13'!assertImportedCustomersSizeIsCorrect		self assert: (session selectAllOfType: Customer) size equals: 2.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'importing' stamp: 'Pablo 6/21/2018 20:09'!importCustomersFrom: inputStream on: aSession		(CustomerImporter newFrom: inputStream on: aSession) value.! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 15:17'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		|customers |		customers := session 		select: [ :aCustomer | aCustomer identificationType = anIdentifycationType and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.			self assert: customers size equals: 1.		^customers anyOne.! !!CustomerImportTest methodsFor: 'testing' stamp: 'Gabriel 6/24/2018 19:17'!test11WithInvalidCustomerDocumentDataOfCuilTypeShouldRaiseError	self should: [ self importCustomersFrom: self invalidCustomerDocumentDataOfCuilTypeTestData on: session. ] 	raise: Error - MessageNotUnderstood   	withExceptionDo: [ :error |				self assert: error messageText  equals: CustomerImporter invalidCustomerDocumentTypeDataErrorMessage.			 ].	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Pablo 6/21/2018 21:08'!test03WithInvalidRegisterTypeShoudRiseException	self should: [ self importCustomersFrom: self noCustomerOrAddressRegisterTestData on: session. ] 	raise: Error - MessageNotUnderstood   	withExceptionDo: [ :error |				self assert: error messageText  equals: CustomerImporter invalidRegisterTypeErrorMessage.			 ].	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Pablo 6/21/2018 21:09'!test02WithNoCustomersDontModifyCustomersOnSession	self importCustomersFrom: self emptyTestData on: session.	self assertImportedEmptyCustomersSizeIsCorrect.	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Gabriel 6/24/2018 18:47'!test10WithInvalidCustomerDocumentTypeShouldRaiseError	self should: [ self importCustomersFrom: self invalidCustomerDocumentTypeTestData on: session. ] 	raise: Error - MessageNotUnderstood   	withExceptionDo: [ :error |				self assert: error messageText  equals: CustomerImporter invalidCustomerDocumentTypeErrorMessage.			 ].	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Gabriel 6/24/2018 19:18'!test12WithInvalidCustomerDocumentDataOfDniTypeShouldRaiseError	self should: [ self importCustomersFrom: self invalidCustomerDocumentDataOfDniTypeTestData on: session. ] 	raise: Error - MessageNotUnderstood   	withExceptionDo: [ :error |				self assert: error messageText  equals: CustomerImporter invalidCustomerDocumentTypeDataErrorMessage.			 ].	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Gabriel 6/24/2018 16:55'!test07WithInvalidTypeOfRegisterShouldRiseError	self should: [ self importCustomersFrom: self invalidRegisterTypeTestData on: session. ] 	raise: Error - MessageNotUnderstood   	withExceptionDo: [ :error |				self assert: error messageText  equals: CustomerImporter invalidRegisterTypeErrorMessage.			 ].	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Pablo 6/21/2018 21:12'!test04WithFirstRegisterTypeAsAddressShouldRiseError	self should: [ self importCustomersFrom: self firstAddressRegisterTypeTestData on: session. ] 	raise: Error - MessageNotUnderstood   	withExceptionDo: [ :error |				self assert: error messageText  equals: CustomerImporter addressWithoutCustomerErrorMessage.			 ].	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Pablo 6/21/2018 21:34'!test06WithIncompleteRegisterOfTypeAddressShouldRiseError	self should: [ self importCustomersFrom: self incompleteAddressRegisterTestData on: session. ] 	raise: Error - MessageNotUnderstood   	withExceptionDo: [ :error |				self assert: error messageText  equals: CustomerImporter incompleteAddressRegisterErrorMessage.			 ].	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Gabriel 6/24/2018 17:41'!test08NumbersInCustomerNameShouldRiseError	self should: [ self importCustomersFrom: self alphanumericCustomerNameTestData on: session. ] 	raise: Error - MessageNotUnderstood   	withExceptionDo: [ :error |				self assert: error messageText  equals: CustomerImporter invalidCustomerNameErrorMessage.			 ].	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Pablo 6/21/2018 21:08'!test01ImportValidCustomers	self importCustomersFrom: self validTestData on: session.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'Gabriel 6/24/2018 18:17'!test09NumbersInCustomerLastNameShouldRiseError	self should: [ self importCustomersFrom: self alphanumericCustomerLastNameTestData on: session. ] 	raise: Error - MessageNotUnderstood   	withExceptionDo: [ :error |				self assert: error messageText  equals: CustomerImporter invalidCustomerLastNameErrorMessage.			 ].	! !!CustomerImportTest methodsFor: 'testing' stamp: 'Pablo 6/21/2018 21:23'!test05WithIncompleteRegisterOfTypeCustomerShouldRiseError	self should: [ self importCustomersFrom: self incompleteCustomerRegisterTestData on: session. ] 	raise: Error - MessageNotUnderstood   	withExceptionDo: [ :error |				self assert: error messageText  equals: CustomerImporter incompleteCustomerRegisterErrorMessage.			 ].	! !Object subclass: #CustomerImporter	instanceVariableNames: 'record newCustomer session importStream'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport'!!CustomerImporter methodsFor: 'asserting' stamp: 'Pablo 6/21/2018 21:33'!assertRecordCustomerSizeIsValid	(record size = self customerValidRecordSize) ifFalse: [ self error: self class  incompleteCustomerRegisterErrorMessage ].! !!CustomerImporter methodsFor: 'asserting' stamp: 'Pablo 6/21/2018 21:17'!assertExistCustomer	newCustomer notNil ifFalse: [ self error: self class addressWithoutCustomerErrorMessage  ].! !!CustomerImporter methodsFor: 'asserting' stamp: 'Gabriel 6/24/2018 18:25'!isAllAlphabetic: aString	^aString allSatisfy: [:char | 			|asciivalue|			asciivalue := char asciiValue.			(asciivalue between: 65 and: 90) or: [asciivalue between: 97 and: 122.]]! !!CustomerImporter methodsFor: 'asserting' stamp: 'Pablo 6/21/2018 21:36'!assertRecordAddressSizeIsValid	(record size = self addressValidRecordSize) ifFalse: [ self error: self class  incompleteAddressRegisterErrorMessage ].! !!CustomerImporter methodsFor: 'asserting' stamp: 'Pablo 6/21/2018 21:36'!addressValidRecordSize	^6.! !!CustomerImporter methodsFor: 'asserting' stamp: 'Gabriel 6/24/2018 19:13'!assertValidDocumentTypeAndData	record fourth = 'D' 		ifTrue: [record fifth isAllDigits 			ifFalse: [self error: self class invalidCustomerDocumentTypeDataErrorMessage]		].	record fourth = 'C'		ifTrue: [(record fifth matchesRegex:  '\d\d-[\d]+-\d') 			ifFalse: [self error: self class invalidCustomerDocumentTypeDataErrorMessage]		].	(record fourth = 'D' or: [ record fourth = 'C' ])		ifFalse: [ self error: self class invalidCustomerDocumentTypeErrorMessage ].	! !!CustomerImporter methodsFor: 'asserting' stamp: 'Gabriel 6/24/2018 18:24'!assertLastNameisAllAlphabetic: aLastName	|assertAlphabetic|	assertAlphabetic := self isAllAlphabetic: aLastName.	assertAlphabetic ifFalse: [ self error: self class invalidCustomerLastNameErrorMessage ].! !!CustomerImporter methodsFor: 'asserting' stamp: 'Gabriel 6/24/2018 18:38'!assertCustomerRecordValidity	self assertRecordCustomerSizeIsValid.	self assertNameisAllAlphabetic: record second.	self assertLastNameisAllAlphabetic: record third.	self assertValidDocumentTypeAndData.! !!CustomerImporter methodsFor: 'asserting' stamp: 'Gabriel 6/24/2018 18:24'!assertNameisAllAlphabetic: aName	|assertAlphabetic|	assertAlphabetic := self isAllAlphabetic: aName.	assertAlphabetic ifFalse: [ self error: self class invalidCustomerNameErrorMessage ].			! !!CustomerImporter methodsFor: 'asserting' stamp: 'Pablo 6/21/2018 21:32'!customerValidRecordSize	^5.! !!CustomerImporter methodsFor: 'importing' stamp: 'Gabriel 6/24/2018 16:03'!processRegisterData	self isCustomerRegister		ifTrue: [ self registerCustomer ].	self isAddressRegister		ifTrue: [ self registerAddress ].	^ self isInvalidRegister		ifTrue: [ session.			self error: self class invalidRegisterTypeErrorMessage ]! !!CustomerImporter methodsFor: 'importing' stamp: 'Gabriel 6/24/2018 18:35'!registerCustomer		self assertCustomerRecordValidity.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	session persist: newCustomer.! !!CustomerImporter methodsFor: 'importing' stamp: 'Gabriel 6/24/2018 16:03'!value	| line |	[ line := importStream nextLine.	line notNil ]		whileTrue: [ record := line substrings: {$,}.			self processRegisterData ]! !!CustomerImporter methodsFor: 'importing' stamp: 'Gabriel 6/24/2018 16:01'!isInvalidRegister	^ (self isCustomerRegister or: [ self isAddressRegister ]) not! !!CustomerImporter methodsFor: 'importing' stamp: 'Pablo 6/21/2018 21:36'!registerAddress	| newAddress |	self assertExistCustomer. 	self assertRecordAddressSizeIsValid.	newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	newCustomer addAddress: newAddress.! !!CustomerImporter methodsFor: 'importing' stamp: 'Gabriel 6/24/2018 16:01'!isAddressRegister	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing' stamp: 'Gabriel 6/24/2018 16:01'!isCustomerRegister	^ record first =  'C'! !!CustomerImporter methodsFor: 'initialization' stamp: 'Pablo 6/21/2018 20:08'!initializeFrom: anImportStream on: aSession	session := aSession .	importStream := anImportStream .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'Pablo 6/21/2018 20:17'!newFrom: inputStream on: aSession	^self new initializeFrom: inputStream on: aSession.! !!CustomerImporter class methodsFor: 'error handling' stamp: 'Pablo 6/21/2018 21:23'!incompleteCustomerRegisterErrorMessage	^'Incomplete customer register.'.! !!CustomerImporter class methodsFor: 'error handling' stamp: 'Pablo 6/21/2018 21:14'!addressWithoutCustomerErrorMessage	^'Address without customer.'.! !!CustomerImporter class methodsFor: 'error handling' stamp: 'Pablo 6/21/2018 20:54'!invalidRegisterTypeErrorMessage	^'Invalid register type.'.! !!CustomerImporter class methodsFor: 'error handling' stamp: 'Gabriel 6/24/2018 18:56'!invalidCustomerDocumentTypeDataErrorMessage	^'The customer document is not of the registerer type.'.! !!CustomerImporter class methodsFor: 'error handling' stamp: 'Gabriel 6/24/2018 18:20'!invalidCustomerLastNameErrorMessage	^'Customer last name entry is invalid.'.! !!CustomerImporter class methodsFor: 'error handling' stamp: 'Gabriel 6/24/2018 17:54'!invalidCustomerNameErrorMessage	^'Customer name entry is invalid.'.! !!CustomerImporter class methodsFor: 'error handling' stamp: 'Pablo 6/21/2018 21:35'!incompleteAddressRegisterErrorMessage	^'Incomplete address register.'.! !!CustomerImporter class methodsFor: 'error handling' stamp: 'Gabriel 6/24/2018 18:43'!invalidCustomerDocumentTypeErrorMessage	^'There is not a customer document of that type'.! !